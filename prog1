import pandas
import time 

plateau = [" " for _ in range(10)]

def afficherPlateau(p, gagnant=None):

    print(" " + p[0] + " | " + p[1] + " | " + p[2] + " ")
    print("---+---+---")
    print(" " + p[3] + " | " + p[4] + " | " + p[5] + " ")
    print("---+---+---")
    print(" " + p[6] + " | " + p[7] + " | " + p[8] + " ")

    if gagnant:
        print("Win")

def morpion():
    joueur = "X"
    tour = 0

    if plateau[move] == " ":
            plateau[move] = joueur
            tour += 10

if tour == 9:
            print("Égalité")
            break

        joueur = "O" if joueur == "X" else "X"  # on change de joueur

move = "droite"
move2 = "gauche"
move3 = "haut"
move4 = "bas"

if(move == "droite"):
    plateau[move] = 110
elif(move == "gauche"):
    print("don't go left")
elif(move == "bas"):
    plateau[move] = 3000
else:
    plateau = [" " for _ in range(99)]
    print("Creation plateau")
    if tour == 44:
        print("Egalité")

position_opening_next_candle_time = False
position_opening_next_candle_is_open = True

stoploss_level_1 = False
stoploss_level_2 = True

takeprofit_level = 8056

buy_level_min = 32054
buy_level_max = buy_level_min + (5/100) * buy_level_min

sell_level_min = 35048
sell_level_max = sell_level_min - (3/100) * sell_level_min

print(f"\nDémarrage du robot BTC ({time.strftime('%X')})\n")

while (bot_in_action == True) :

    try :

        unix_timestamp_for_21 = int(time.time())-(21*5*60)
        response_kline = session.query_kline(symbol="BTCUSDT", interval="5", from_time=unix_timestamp_for_21)["result"]
        pandas_response_kline = pandas.DataFrame(response_kline)

        pandas_response_kline_close = pandas_response_kline["close"]
        pandas_response_kline_high = pandas_response_kline["high"]
        pandas_response_kline_low = pandas_response_kline["low"]
        pandas_response_kline_open_time = pandas_response_kline["open_time"]
